<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinqExtender</name>
    </assembly>
    <members>
        <member name="T:LinqExtender.Fluent.FluentEntity">
            <summary>
            Contains Entity Info.
            </summary>
        </member>
        <member name="P:LinqExtender.Fluent.FluentEntity.Name">
            <summary>
             name of the entity, can be overriden by <c>OriginalEntityNameAttribute</c>
            </summary>
        </member>
        <member name="P:LinqExtender.Fluent.FluentEntity.ItemsToSkipFromStart">
            <summary>
            default  0, number of items to skip from start.
            </summary>
        </member>
        <member name="P:LinqExtender.Fluent.FluentEntity.UniqueAttribte">
            <summary>
            list of unique column name.
            </summary>
        </member>
        <member name="M:LinqExtender.ProjectedQuery`2.#ctor(System.Linq.Expressions.Expression,LinqExtender.Query{`0})">
            <summary>
            Initializes a new instance of the <see cref="!:Query&lt;T&gt;.Projected&lt;TS&gt;"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:LinqExtender.ProjectedQuery`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:LinqExtender.ProjectedQuery`2.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.</returns>
        </member>
        <member name="P:LinqExtender.ProjectedQuery`2.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Linq.Expressions.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.</returns>
        </member>
        <member name="P:LinqExtender.ProjectedQuery`2.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.</returns>
        </member>
        <member name="M:LinqExtender.QueryExtension.Combine(System.Collections.Generic.IList{LinqExtender.BucketItem.QueryCondition},System.Type)">
            <summary>
            tries to combine the values for a give a type . Ex User defined clasee
            and its properties.
            </summary>
            <param name="list"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:LinqExtender.QueryExtension.CopyRecursive(System.Object,System.Object)">
            <summary>
            recursively copies object properties to destination.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:LinqExtender.Interface.IQueryObjectImpl.FillBucket(LinqExtender.Bucket)">
            <summary>
            fills up the bucket from current object.
            </summary>
            <param name="bucket"></param>
            <returns></returns>
        </member>
        <member name="M:LinqExtender.Interface.IQueryObjectImpl.FillObject(LinqExtender.Bucket)">
            <summary>
             fills the object from working bucket.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:LinqExtender.Interface.IQueryObjectImpl.FillProperty(System.String,System.Object)">
            <summary>
            fills up the property of current object.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:LinqExtender.QueryObject`1.LinqExtender#Interface#IVersionItem#Commit">
            <summary>
            updates the cached object with update object
            </summary>
        </member>
        <member name="M:LinqExtender.QueryObject`1.LinqExtender#Interface#IVersionItem#Revert">
            <summary>
            converts the current object to cachedObject.
            </summary>
        </member>
        <member name="M:LinqExtender.QueryObject`1.FillBucket(LinqExtender.Bucket)">
            <summary>
            Takes bucket reference and fills it up with new values.
            </summary>
            <param name="bucket"></param>
            <returns></returns>
        </member>
        <member name="M:LinqExtender.QueryObject`1.FillProperty(System.String,System.Object)">
            <summary>
            Fill value for a property name.
            </summary>
            <param name="name">Name of the property, accepts original property or Modified by OriginalFieldNameAttribute</param>
            <param name="value">the value of the property , retrived from property get accessor.</param>
        </member>
        <member name="P:LinqExtender.QueryObject`1.IsDeleted">
            <summary>
            determines if an item is removed from collection.
            </summary>
        </member>
        <member name="P:LinqExtender.QueryObject`1.IsAltered">
            <summary>
            deternmines if the object is altered , thus call UpdateItemFormat.
            </summary>
        </member>
        <member name="P:LinqExtender.QueryObject`1.IsNewlyAdded">
            <summary>
            determines if an item is newly added in the collection.
            </summary>
        </member>
        <member name="M:LinqExtender.FormatProvider.TSqlFormatProvider.GetValue(System.Object)">
            <summary>
            overrride it to format value you want.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:LinqExtender.Attribute.OriginalEntityNameAttribute">
            <summary>
            Use this to mark if entity name is different than class name.
            </summary>
        </member>
        <member name="P:LinqExtender.Attribute.OriginalEntityNameAttribute.EntityName">
            <summary>
            maps to the name of the original enity name.
            </summary>
        </member>
        <member name="M:LinqExtender.Interface.IModify.Sort">
            <summary>
            Sorts the collection, using the orderby clause used in query.
            </summary>
        </member>
        <member name="M:LinqExtender.Interface.IModify`1.AddRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Adds items to the main collection and does a sort operation if any orderby is used in query.
            </summary>
            <param name="items"></param>
            <param name="inMemorySort"></param>
        </member>
        <member name="M:LinqExtender.Collection.QueryItems`1.Any">
            <summary>
            returnts true if the sequece contains any element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqExtender.Collection.QueryItems`1.Single">
            <summary>
            returns only element of the sequece , throws exception if there is no element in 
            the sequece
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqExtender.Collection.QueryItems`1.Count">
            <summary>
            returns the count of the sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqExtender.Collection.QueryItems`1.First">
            <summary>
            returns the first item of the sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqExtender.Collection.QueryItems`1.Last">
            <summary>
            returns the last item of the sequence.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinqExtender.Attribute.IgnoreAttribute">
            <summary>
            With this attribute present, property will be ignored by extender.
            </summary>
        </member>
        <member name="T:LinqExtender.RelationType">
            <summary>
            Represents the relational query operator equavalent.
            </summary>
        </member>
        <member name="F:LinqExtender.RelationType.Equal">
            <summary>
            Eqavalent of "=="
            </summary>
        </member>
        <member name="F:LinqExtender.RelationType.GreaterThan">
            <summary>
            Eqavalent of ">"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:LinqExtender.RelationType.LessThan" -->
        <member name="F:LinqExtender.RelationType.GreaterThanEqual">
            <summary>
            Eqavalent of ">="
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:LinqExtender.RelationType.LessThanEqual" -->
        <member name="F:LinqExtender.RelationType.NotEqual">
            <summary>
            Eqavalent of "!="
            </summary>
        </member>
        <member name="F:LinqExtender.RelationType.NotApplicable">
            <summary>
            Default value for first where clause item
            </summary>
        </member>
        <member name="T:LinqExtender.Query`1">
            <summary>
             Entry class for LINQ provider. Containter of the virtual methods that will be invoked on select, intsert, update, remove or get calls.
            </summary>
            <typeparam name="T">Query object type</typeparam>
        </member>
        <member name="M:LinqExtender.Query`1.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates the query for type and current expression.
            </summary>
            <typeparam name="TS">currenty type passed by frameowrk</typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:LinqExtender.Query`1.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Creates the query for current expression.
            </summary>
            <param name="expression"></param>
            <returns>ref to IQueryable instance</returns>
        </member>
        <member name="M:LinqExtender.Query`1.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query for current type and expression
            </summary>
            <typeparam name="TResult">Current type</typeparam>
            <param name="expression"></param>
            <returns>typed result</returns>
        </member>
        <member name="M:LinqExtender.Query`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query for current expression.
            </summary>
            <param name="expression"></param>
            <returns>object/collection</returns>
        </member>
        <member name="M:LinqExtender.Query`1.Sort">
            <summary>
            internally tries to sort , if the query contains orderby statement.
            </summary>
        </member>
        <member name="M:LinqExtender.Query`1.AddRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Adds list of items to the collection , optionally calls in memory sort. Used in Query<typeparamref name="T"/>.Process
            </summary>
            <param name="items">collection</param>
            <param name="inMemorySort">true/false</param>
        </member>
        <member name="M:LinqExtender.Query`1.AddItem">
            <summary>
            Invoked after SubmitChanges(), if there is new item in the colleciton.
            </summary>
        </member>
        <member name="M:LinqExtender.Query`1.RemoveItem">
            <summary>
            Invoked after SubmitChanges(), if there are delted items in the collection.
            </summary>
        </member>
        <member name="M:LinqExtender.Query`1.UpdateItem">
            <summary>
            Invoked after SubmitChanges(), if any of the object value is altered.
            </summary>
        </member>
        <member name="M:LinqExtender.Query`1.GetItem">
            <summary>
            gets the single item for unique properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqExtender.Query`1.SubmitChanges">
            <summary>
             When called, it invokes the appropiate Query<typeparamref name="T"/> method to finalize the collection changes.
            </summary>
        </member>
        <member name="E:LinqExtender.Query`1.OnError">
            <summary>
             Event raised internally when an error is occured.
            </summary>
        </member>
        <member name="T:LinqExtender.Query`1.ErrorHandler">
            <summary>
            Error handler
            </summary>
            <param name="providerException">Exception wrapper for LinqExtender</param>
        </member>
        <member name="T:LinqExtender.Bucket">
            <summary>
            Bucket is stuctured represtion of the orignal query object.
            </summary>
        </member>
        <member name="M:LinqExtender.Bucket.#ctor">
            <summary>
            Creates a default Bucket object, with self reference.
            </summary>
        </member>
        <member name="M:LinqExtender.Bucket.Clear">
            <summary>
            Clears out any used properties.
            </summary>
        </member>
        <member name="P:LinqExtender.Bucket.Name">
            <summary>
            Name of the node, either the class name or value of <c>OriginalEntityName</c>, if used.
            </summary>
        </member>
        <member name="P:LinqExtender.Bucket.IsDirty">
            <summary>
            used to determine, if any of the query parameter is set.
            </summary>
        </member>
        <member name="P:LinqExtender.Bucket.UniqueItems">
            <summary>
            Returns property name for which the UniqueIdentifierAttribute is defined.
            </summary>
        </member>
        <member name="P:LinqExtender.Bucket.UniqueProperties">
            <summary>
            Gets unique identifier properties.
            </summary>
        </member>
        <member name="P:LinqExtender.Bucket.Instance">
            <summary>
            Fluent bucket
            </summary>
        </member>
        <member name="T:LinqExtender.Bucket.OrderByInfo">
            <summary>
            The Filled up with query order by information.
            </summary>
        </member>
        <member name="M:LinqExtender.Fluent.FluentBucket.Create">
            <summary>
            creates the reference from memory.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinqExtender.Fluent.FluentBucket.ExpressionTree">
            <summary>
            contains the bucketItem and their relational info.
            </summary>
        </member>
        <member name="P:LinqExtender.Fluent.FluentBucket.For">
            <summary>
            enables BucketItem
            </summary>
        </member>
        <member name="T:LinqExtender.OperatorType">
            <summary>
            Type of operator used in where clause.
            </summary>
        </member>
        <member name="F:LinqExtender.OperatorType.NONE">
            <summary>
            Used for first item in where entry
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:LinqExtender.OperatorType.AND" -->
        <member name="F:LinqExtender.OperatorType.OR">
            <summary>
            Used for  ||
            </summary>
        </member>
        <member name="T:LinqExtender.BucketItem">
            <summary>
            Contains the detail for quried or valued items.
            </summary>
        </member>
        <member name="M:LinqExtender.BucketItem.#ctor(System.Type,System.String,System.String,System.Object,System.Boolean,LinqExtender.RelationType,System.Boolean)">
            <summary>
            Creates a new bucket object.
            </summary>
            <param name="underlyingType">type of the bucket object</param>
            <param name="name">Name of the item that maps with source</param>
            <param name="propertyName">name of property regardless of OriginalFieldNameAttribute</param>
            <param name="value">value of the item</param>
            <param name="unique">if unique attriube is defined for item</param>
            <param name="relationType">relation type , defines what type of expression, equal, lessthan or other.</param>
            <param name="queryVisible">Marks that it is to be used in query expression</param>
        </member>
        <member name="M:LinqExtender.BucketItem.FindAttribute(System.Type)">
            <summary>
            finds the attribute, within property
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:LinqExtender.BucketItem.Values">
            <summary>
            Return multiple values if item quried with different values in same where clause.
            </summary>
        </member>
        <member name="P:LinqExtender.BucketItem.Value">
            <summary>
            Return values for quried item in where clause. 
            Optionally, tries to combine the value for nested class queries.
            Optionally, creates object[] for system and abstract types.
            Return values in raw format regardless of its releation type.
            </summary>
        </member>
        <member name="P:LinqExtender.BucketItem.HasMultipleValues">
            <summary>
            Determines if the item is used multiple times in where clause.
            </summary>
        </member>
        <member name="P:LinqExtender.BucketItem.RelationType">
            <summary>
            Return <c>RelationType</c> enum for the quried item.
            </summary>
        </member>
        <member name="P:LinqExtender.BucketItem.Name">
            <summary>
             Name of the property or value of <c>OriginalFieldNameAttribute</c> if used.
            </summary>
        </member>
        <member name="P:LinqExtender.BucketItem.ProperyName">
            <summary>
            Name of property that bucketItem represents.
            </summary>
        </member>
        <member name="P:LinqExtender.BucketItem.PropertyType">
            <summary>
            Type of the property that bucketItem represents.
            </summary>
        </member>
        <member name="P:LinqExtender.BucketItem.IsModified">
            <summary>
            <value>true</value> if user updatas the property value manually.
            </summary>
        </member>
        <member name="P:LinqExtender.BucketItem.Visible">
            <summary>
            Determines if the item is not maked to be Ignored by <c>IgnoreAttribute</c>
            </summary>
        </member>
        <member name="T:LinqExtender.BucketItem.QueryCondition">
            <summary>
            Represents the conditioal operators and its compared values for where clause.
            </summary>
        </member>
        <member name="P:LinqExtender.BucketItem.QueryCondition.RelationType">
            <summary>
            Represents the comparison operators like !=, >=, etc
            </summary>
        </member>
        <member name="P:LinqExtender.TreeNode.Nodes">
            <summary>
            list of nodes under each expression.
            </summary>
        </member>
        <member name="P:LinqExtender.TreeNode.Left">
            <summary>
            left leaf of the current root, can contain bucketItem or a TreeNode
            </summary>
        </member>
        <member name="P:LinqExtender.TreeNode.Right">
            <summary>
            right leaf of the current root, can contain bucketItem or a TreeNode
            </summary>
        </member>
        <member name="T:LinqExtender.BucketImpl`1">
            <summary>
            internal implementation of bucket
            </summary>
        </member>
        <member name="M:LinqExtender.BucketImpl`1.Clear">
            <summary>
            clear outs the data.
            </summary>
        </member>
        <member name="P:LinqExtender.BucketImpl`1.IsAlreadyProcessed">
            <summary>
            marks if the bucket is already prepared or not.
            </summary>
        </member>
        <member name="P:LinqExtender.BucketImpl`1.IsAsc">
            <summary>
            internal use : to check if the bucket object should be sorted in asc or dsc
            </summary>
        </member>
        <member name="P:LinqExtender.BucketImpl`1.CurrentExpessionType">
            <summary>
            Defines the current expression node.
            </summary>
        </member>
        <member name="P:LinqExtender.BucketImpl`1.ClauseItemCount">
            <summary>
            number of items queried in <c>Where</c> caluse
            </summary>
        </member>
        <member name="P:LinqExtender.BucketImpl`1.Level">
            <summary>
            gets the Level of the clause item
            </summary>
        </member>
        <member name="P:LinqExtender.BucketImpl`1.TreeNodeInfo.Id">
            <summary>
            identifier
            </summary>
        </member>
        <member name="T:LinqExtender.Attribute.UniqueIdentifierAttribute">
            <summary>
             defines a property to be unique.
            </summary>
        </member>
    </members>
</doc>
